pipeline {
    agent any
    environment {
        REGISTRY_URL = 'asia-south1-docker.pkg.dev'
        // PROJECT_ID = 'robust-helix-423713-a4'
        // ARTIFACT_REGISTRY = 'dailycodebuffer'
        // CLUSTER = 'dailycodebuffer-cluster-1'
        // ZONE = 'us-central1-a'  // Update with the correct zone
        GITHUB_TOKEN = credentials('github-access-token')
        GC_KEY = credentials('GCP')
        KUBECONFIG = credentials('kubeconfig')  // Reference the kubeconfig credential
        REPO_URL = "${REGISTRY_URL}/${PROJECT_ID}/${ARTIFACT_REGISTRY}/configserver"
    }
    tools {
        maven 'maven'
    }
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out the code...'
                withCredentials([string(credentialsId: 'github-access-token', variable: 'GITHUB_TOKEN')]) {
                    echo "Using GitHub Token: ${GITHUB_TOKEN}"
                    checkout([$class: 'GitSCM',
                        branches: [[name: '*/main']],
                        extensions: [],
                        userRemoteConfigs: [[credentialsId: 'github-access-token', url: 'https://github.com/borissolomonia/ConfigServer.git']]
                    ])
                }
            }
        }
        stage('Build and Push Stage') {
            steps {
                echo 'Building and pushing the Docker image...'
                withCredentials([file(credentialsId: 'GCP', variable: 'GC_KEY')]) {
                    sh 'gcloud auth activate-service-account --key-file=$GC_KEY'
                    sh 'gcloud auth configure-docker ${REGISTRY_URL}'
                    sh 'mvn clean install jib:build -DREPO_URL=${REPO_URL}'
                }
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying to Kubernetes...'
                sh "sed -i 's|IMAGE_URL|${REPO_URL}|g' k8s/deployment.yaml"
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) {
                    sh 'kubectl apply -f k8s/deployment.yaml --kubeconfig $KUBECONFIG'
                }
            }
        }
    }
}


// node {
//     def repourl = "${REGISTRY_URL}/${PROJECT_ID}/${ARTIFACT_REGISTRY}"
//     def mvnHome = tool name: 'maven', type: 'maven'
//     def mvnCMD = "${mvnHome}/bin/mvn"
//     stage('Checkout'){
//         checkout([$class: 'GitSCM',
//          branches: [[name: '*/main']],
//           extensions: [], 
//           userRemoteConfigs: [[credentialsId: 'git', url: 'hrttps://github.com/borissolomonia/ConfigServer.git']]])
//     }
//     stage('Build and Push Stage'){
//         withCredentials([file(credentialsId: 'gcp', variable:'GC_KEY')]){
//             sh("gcloud auth activate-service-account --key-file=${GC_KEY}")
//             sh 'gcloud auth configure-docker asia-south1-docker.pkg.dev'
//             sh "${mvnCMD} clean install jib:build -DREPO_URL=${REGISTRY_URL}/${PROJECT_ID}/${ARTIFACT_REGISTRY}"
//         }

//     }
//     stage('Deploy'){
//         sh "sed -i 's|IMAGE_URL|${repourl}|g' k8s/deployment.yaml"    
//         step([$class: 'KubernetesEngineBuilder',
//             projectId: env.PROJECT_ID,
//             clusterName: env.CLUSTER,
//             location: env.ZONE,
//             manifestPattern: 'k8s/deployment.yaml',
//             credentialsId: env.PROJECT_ID,
//             verifyDeployments: true])    
//     }
// }